{"version":3,"sources":["webpack://emeraldjava.github.io/./src/components/sidebar/Bio.js","webpack://emeraldjava.github.io/./src/components/sidebar/SocialLinks.js","webpack://emeraldjava.github.io/./src/components/sidebar/TechTags.js","webpack://emeraldjava.github.io/./src/components/sidebar/Sidebar.js","webpack://emeraldjava.github.io/./src/components/tags/TechTag.js","webpack://emeraldjava.github.io/./src/templates/blog-post.js"],"names":["author","tagline","className","src","bioPic","style","maxWidth","alt","contacts","href","linkedin","title","FaLinkedin","size","color","github","FaGithubSquare","stackoverflow","FaStackOverflow","freecodecamp","FaFreeCodeCamp","twitter","FaTwitterSquare","props","labels","posts","tags","map","label","count","forEach","post","node","frontmatter","includes","tag","filter","category","techTags","i","push","TechTag","key","tech","name","getTechTags","StaticQuery","query","render","data","site","siteMetadata","Link","to","allMarkdownRemark","edges","icon","test","React","FontAwesome","Devicons","fontSize","markdownRemark","url","pageContext","slug","date","dangerouslySetInnerHTML","__html","html"],"mappings":"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","file":"component---src-templates-blog-post-js-5312e1cdbf801ee2503e.js","sourcesContent":["import React from \"react\"\nimport \"./sidebar.css\"\n\nimport bioPic from \"../../images/emeraldjava.jpeg\"\n\nconst Bio = ({ author, tagline }) => {\n\n    return (\n        <div className=\"bio-main w-75\">\n            <img src={bioPic} style={{ maxWidth: `100px` }} className=\"profile-img\" alt=\"\" />\n            <h3 className=\"mt-2 author-bio\">{author}</h3>\n            <small className=\"text-muted\">{tagline}</small>\n        </div>\n    )\n}\n\nexport default Bio","import React from \"react\"\nimport {\n    FaLinkedin,\n    FaGithubSquare,\n    FaStackOverflow,\n    FaFreeCodeCamp,\n    FaTwitterSquare\n} from \"react-icons/fa\"\nimport \"./sidebar.css\"\n\n\nconst SocialLinks = ({ contacts }) => {\n    return (\n        <div className=\"side-social-links float-left mt-3 mb-3\">\n            <a className=\"text-secondary p-2\"\n                href={contacts.linkedin}>\n                <span title=\"Linked In\">\n                    <FaLinkedin size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n            <a className=\"text-secondary p-2\"\n                href={contacts.github}>\n                <span title=\"GitHub\">\n                    <FaGithubSquare size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n            <a className=\"text-secondary p-2\"\n                href={contacts.stackoverflow}>\n                <span title=\"Stack Overflow\">\n                    <FaStackOverflow size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n            <a className=\"text-secondary p-2\"\n                href={contacts.freecodecamp}>\n                <span title=\"freeCodeCamp\">\n                    <FaFreeCodeCamp size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n            <a className=\"text-secondary p-2\"\n                href={contacts.twitter}>\n                <span title=\"Twitter\">\n                    <FaTwitterSquare size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n        </div>\n    )\n}\n\nexport default SocialLinks","import React from \"react\"\n\nimport TechTag from \"../tags/TechTag\"\n\nconst TechTags = (props) => {\n    const labels = props.labels\n    const posts = props.posts\n\n    const labelCount = labels.map(label => {\n        let count = 0;\n        posts.forEach(post => {\n            if (post.node.frontmatter.tags.includes(label.tag)) {\n                count = count + 1\n            }\n        })\n        return [label.tag, count]\n    })\n\n    const categories = labelCount.filter(label => {\n        return label[1] > 0\n    })\n\n    const tags = categories.map(category => {\n        return category[0]\n    })\n\n    const getTechTags = (tags) => {\n        const techTags = []\n        tags.forEach((tag, i) => {\n            labels.forEach((label) => {\n                if (tag === label.tag) {\n                    techTags.push(<TechTag key={i} tag={label.tag} tech={label.tech} name={label.name} size={label.size} color={label.color} />)\n                }\n            })\n        })\n        return techTags\n    }\n\n    return (\n        <>\n            <h4>Tech Topics</h4>\n            <div className=\"d-block\">\n                {getTechTags(tags)}\n            </div>\n        </>\n    )\n}\n\nexport default TechTags","import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport Bio from \"./Bio\"\nimport \"./sidebar.css\"\n\nimport SocialLinks from \"./SocialLinks\"\nimport TechTags from \"./TechTags\"\n\nconst Sidebar = () => {\n    return (\n        <StaticQuery\n            query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                linkedin\n                                github\n                                stackoverflow\n                                freecodecamp\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n            render={data => (\n                <>\n                    <div className=\"sidebar-main border-right\">\n                        <Bio author={data.site.siteMetadata.author} tagline={data.site.siteMetadata.tagline} />\n                        <SocialLinks contacts={data.site.siteMetadata.contacts} />\n                        <div className=\"page-links\">\n                            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n                            <Link to=\"/emeraldjava\"><span className=\"text-dark d-block py-1\">CV</span></Link>\n                            <Link to=\"/archive\"><span className=\"text-dark d-block py-1\">Archive</span></Link>\n                        </div>\n                        <div className=\"tech-tags mt-4\">\n                            <TechTags labels={data.site.siteMetadata.labels} posts={data.allMarkdownRemark.edges} />\n                        </div>\n                    </div>\n                </>\n            )}\n        />\n    )\n}\n\nexport default Sidebar\n","import React from \"react\"\nimport * as FontAwesome from \"react-icons/fa\"\nimport * as Devicons from \"react-icons/di\"\n\nimport \"./tags.css\"\nimport { Link } from \"gatsby\";\n\nconst TechTag = (props) => {\n    const { tag, tech, name, size, color } = props\n    const str = name;\n    const icon = /^Fa/.test(str) ? React.createElement(FontAwesome[name]) : React.createElement(Devicons[name]);\n\n    return (\n        <div className=\"d-inline-block p-1\">\n            <Link to={`/tags/${tag}/`}>\n                <button\n                    className=\"tech-tag text-white\">\n                    <p className=\"d-inline\">{tech} </p>\n                    <div className=\"d-inline\" style={{ fontSize: size, color: color }}>{icon}</div>\n                </button>\n            </Link>\n\n        </div>\n\n    )\n}\n\nexport default TechTag","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport \"./blog-post.css\"\n\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst BlogPost = (props) => {\n  const post = props.data.markdownRemark\n  const labels = props.data.site.siteMetadata.labels\n  const siteName = props.data.site.siteMetadata.title \n  const siteUrl = props.data.site.siteMetadata.url\n  const url = `${siteUrl}${props.pageContext.slug}`;\n  const tags = post.frontmatter.tags\n\n  const getTechTags = (tags) => {\n    const techTags = []\n    tags.forEach((tag, i) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} tag={label.tag} tech={label.tech} name={label.name} size={label.size} color={label.color} />)\n        }\n      })\n    })\n    return techTags\n  }\n\n  return (\n    <Layout>\n      <SEO title={post.frontmatter.title} />\n      <div className=\"post-page-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n\n        <div className=\"post-main\">\n          <SEO title={post.frontmatter.title} />\n          <div className=\"mt-3\">\n            <h2 className=\"heading\">{post.frontmatter.title}</h2>\n            <div className=\"d-block\">\n              {getTechTags(tags)}\n            </div>\n            <br />\n            <small><i>Published on </i> {post.frontmatter.date}</small>\n            <div dangerouslySetInnerHTML={{ __html: post.html }} />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n      site {\n        siteMetadata {\n          url\n          title\n          labels {\n              tag\n              tech \n              name \n              size \n              color\n          }\n        }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n      }\n    }\n  }\n`\n\nexport default BlogPost\n"],"sourceRoot":""}