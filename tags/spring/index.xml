<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on Posts from emeraldjava</title><link>https://emeraldjava.github.io/tags/spring/</link><description>Recent content in spring on Posts from emeraldjava</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 18 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://emeraldjava.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>emeraldjava api setup</title><link>https://emeraldjava.github.io/post/2021-04-18-emeraldjava-api/</link><pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate><guid>https://emeraldjava.github.io/post/2021-04-18-emeraldjava-api/</guid><description>My setup for a java 11 spring-boot API service deployed on heroku.
Gatsby I&amp;rsquo;d to update this repo first since the deploy action failed with this error
Failed to resolve action download info. Error: Unable to resolve action `JamesIves/github-pages-deploy-action@master`, unable to find version `master` Retrying in 20.243 seconds Error: Unable to resolve action `JamesIves/github-pages-deploy-action@master`, unable to find version `master` See
https://github.com/emeraldjava/emeraldjava.github.io/runs/2374008241?check_suite_focus=true https://github.com/JamesIves/github-pages-deploy-action sdkman First install sdkman for managing java installs</description></item><item><title>Spring Boot - Web Security</title><link>https://emeraldjava.github.io/post/2017/2017-01-24-spring-http-auth/</link><pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate><guid>https://emeraldjava.github.io/post/2017/2017-01-24-spring-http-auth/</guid><description>Spring Boot - Web Security
public class HttpComponentsClientHttpRequestFactoryBasicAuth extends HttpComponentsClientHttpRequestFactory { private HttpHost host; public HttpComponentsClientHttpRequestFactoryBasicAuth(HttpHost host) { super(); this.host = host; } protected HttpContext createHttpContext(HttpMethod httpMethod, URI uri) { return createHttpContext(); } private HttpContext createHttpContext() { // Create AuthCache instance AuthCache authCache = new BasicAuthCache(); // Generate BASIC scheme object and add it to the local auth cache BasicScheme basicAuth = new BasicScheme(); authCache.put(host, basicAuth); // Add AuthCache to the execution context BasicHttpContext localcontext = new BasicHttpContext(); localcontext.</description></item><item><title>Spring Boot - Web Security</title><link>https://emeraldjava.github.io/post/2017/2017-01-25-spring-boot-websecurity/</link><pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate><guid>https://emeraldjava.github.io/post/2017/2017-01-25-spring-boot-websecurity/</guid><description>Spring Boot - Web Security
import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.builders.WebSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; @Configuration @EnableWebSecurity public class WebSecurityConfig extends WebSecurityConfigurerAdapter { //@Autowired public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception { auth.inMemoryAuthentication().withUser(&amp;#34;admin&amp;#34;).password(&amp;#34;admin&amp;#34;).roles(&amp;#34;ADMIN&amp;#34;); auth.inMemoryAuthentication().withUser(&amp;#34;user&amp;#34;).password(&amp;#34;user&amp;#34;).roles(&amp;#34;USER&amp;#34;); } //.csrf() is optional, enabled by default, if using WebSecurityConfigurerAdapter constructor @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(&amp;#34;/daymember&amp;#34;, &amp;#34;/export&amp;#34;, &amp;#34;/header&amp;#34;, &amp;#34;/list&amp;#34;, &amp;#34;/member&amp;#34;, &amp;#34;/menu&amp;#34;, &amp;#34;/prereg&amp;#34;).permitAll().anyRequest().authenticated() .and() .formLogin().loginPage(&amp;#34;/login&amp;#34;).permitAll().defaultSuccessUrl(&amp;#34;/member&amp;#34;) .and() .logout().permitAll(); } /** * http://stackoverflow.</description></item></channel></rss>